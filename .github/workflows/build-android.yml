name: Build MAUI Android APK

on:
  workflow_dispatch:
  push:
    branches: [ main, revive-local-mock ]

jobs:
  build-android:
    runs-on: windows-latest
    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
      NUGET_XMLDOC_MODE: skip
      # valores dummy para el placeholder (puedes sobreescribirlos con secrets)
      OPENAI_API_KEY: DUMMY

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET 8.0.206
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.206

      - name: Show dotnet info
        run: dotnet --info

      - name: Install MAUI Android workload
        run: dotnet workload install maui-android --source https://api.nuget.org/v3/index.json

      # Placeholder de configuración sólo para CI (evita el error de ApiConfig)
      - name: Add CI placeholders (ApiConfig)
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path "EcoVital/Config" | Out-Null
          @"
          // Auto-generated for CI builds only.
          namespace EcoVital.Config
          {
              public static class ApiConfig
              {
                  public static string OpenAIKey => System.Environment.GetEnvironmentVariable("OPENAI_API_KEY") ?? "DUMMY";
                  public static string OpenAIBaseUrl => System.Environment.GetEnvironmentVariable("OPENAI_BASE_URL") ?? "https://api.openai.com/v1";
                  public static string OpenAIModel => System.Environment.GetEnvironmentVariable("OPENAI_MODEL") ?? "gpt-4o-mini";
                  public static bool UseAzureOpenAI => bool.TryParse(System.Environment.GetEnvironmentVariable("USE_AZURE_OPENAI"), out var b) && b;
                  public static string AzureOpenAIEndpoint => System.Environment.GetEnvironmentVariable("AZURE_OPENAI_ENDPOINT") ?? "";
                  public static string AzureOpenAIDeployment => System.Environment.GetEnvironmentVariable("AZURE_OPENAI_DEPLOYMENT") ?? "";
                  // aliases comunes
                  public static string ApiKey => OpenAIKey;
                  public static string BaseUrl => OpenAIBaseUrl;
                  public static string Model => OpenAIModel;
                  public static string GetApiKey() => OpenAIKey;
                  public static string GetBaseUrl() => OpenAIBaseUrl;
              }
          }
          "@ | Out-File -FilePath "EcoVital/Config/ApiConfig.cs" -Encoding UTF8

      - name: Restore (android only)
        run: dotnet restore EcoVital/EcoVital.csproj -p:TargetFramework=net8.0-android

      - name: Build Debug APK (net8.0-android)
        run: dotnet build EcoVital/EcoVital.csproj -c Debug -f net8.0-android /p:AndroidPackageFormat=apk /p:SkipInvalidConfigurations=true

      - name: List output
        shell: pwsh
        run: Get-ChildItem -Recurse "EcoVital/bin/Debug/net8.0-android" | Select-Object FullName

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: EcoVital-APK-Debug
          path: EcoVital/bin/Debug/net8.0-android/*.apk
